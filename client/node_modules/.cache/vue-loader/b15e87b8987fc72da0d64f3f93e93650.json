{"remainingRequest":"/home/huhe/flask123/flask_book/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/huhe/flask123/flask_book/client/src/components/Home.vue?vue&type=style&index=0&id=8dc7cce2&lang=less&scoped=true&","dependencies":[{"path":"/home/huhe/flask123/flask_book/client/src/components/Home.vue","mtime":1584964945541},{"path":"/home/huhe/flask123/flask_book/client/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/huhe/flask123/flask_book/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/huhe/flask123/flask_book/client/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/huhe/flask123/flask_book/client/node_modules/less-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/huhe/flask123/flask_book/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/huhe/flask123/flask_book/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5ob21lX2NvbnRhaW5lciB7CiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjJkZjsKICBoZWlnaHQ6IDEwMCU7Cn0KLmVsLWhlYWRlciB7CiAgdGV4dC1hbGlnbjogY2VudGVyOwogIGZvbnQtc2l6ZTogNDBweDsKICBtYXJnaW4tdG9wOiAyMHB4Owp9Ci5lbC1tYWluIHsKICBtYXJnaW46IDAgYXV0bzsKfQo="},{"version":3,"sources":["Home.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Home.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"home_container\">\n    <el-container>\n      <el-header>图书馆</el-header>\n      <el-main>\n        <!-- 添加书籍按钮 -->\n        <div style=\"text-align:center\">\n          <el-button type=\"primary\" @click=\"addBookVisible = true\" round>添加书籍</el-button>\n        </div>\n\n        <!-- 书籍表格 -->\n        <div style=\"margin-top:20px; width:700px\">\n          <el-table :data=\"books\" style=\"width: 100%\">\n            <el-table-column label=\"书名\" width=\"180\">\n              <template slot-scope=\"scope\">\n                <i class=\"el-icon-reading\"></i>\n                <span style=\"margin-left: 10px\">{{ scope.row.title }}</span>\n              </template>\n            </el-table-column>\n            <el-table-column label=\"作者\" width=\"180\">\n              <template slot-scope=\"scope\">\n                <i class=\"el-icon-user-solid\"></i>\n                <span style=\"margin-left: 10px\">{{ scope.row.author }}</span>\n              </template>\n            </el-table-column>\n            <el-table-column label=\"是否已读\" width=\"180\">\n              <template slot-scope=\"scope\">\n                <span style=\"margin-left: 10px\">\n                  <el-button type=\"primary\" v-if=\"scope.row.read\">已读</el-button>\n                  <el-button type=\"danger\" v-else>未读</el-button>\n                </span>\n              </template>\n            </el-table-column>\n            <el-table-column label=\"操作\">\n              <template slot-scope=\"scope\">\n                <el-button size=\"mini\" @click=\"showEditDialog(scope.row.id)\">编辑</el-button>\n                <el-button size=\"mini\" type=\"danger\" @click=\"deleteBook(scope.row.id)\">删除</el-button>\n              </template>\n            </el-table-column>\n          </el-table>\n        </div>\n      </el-main>\n    </el-container>\n\n    <!-- 添加书籍对话框 -->\n    <el-dialog title=\"添加书籍\" :visible.sync=\"addBookVisible\" width=\"30%\" @close=\"addDialogClosed\">\n      <el-form ref=\"bookRef\" :model=\"addBookForm\" :rules=\"addBookRules\" label-width=\"80px\">\n        <el-form-item label=\"书籍名称\" prop=\"title\">\n          <el-input v-model=\"addBookForm.title\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"作者名称\" prop=\"author\">\n          <el-input v-model=\"addBookForm.author\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"是否读过\">\n          <el-switch v-model=\"addBookForm.read\"></el-switch>\n        </el-form-item>\n      </el-form>\n\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"addBookVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"addBook\">确 定</el-button>\n      </span>\n    </el-dialog>\n\n    <!--编辑对话框 -->\n    <el-dialog title=\"编辑\" :visible.sync=\"editBookVisible\" width=\"30%\" @close=\"editDialogClosed\">\n      <el-form ref=\"editFormRef\" :model=\"editForm\" :rules=\"addBookRules\" label-width=\"80px\">\n        <el-form-item label=\"书籍名称\" prop=\"title\">\n          <el-input v-model=\"editForm.title\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"作者名称\" prop=\"author\">\n          <el-input v-model=\"editForm.author\"></el-input>\n        </el-form-item>\n        \n        <el-form-item label=\"是否读过\">\n          <el-switch v-model=\"editForm.read\" active-color=\"#13ce66\" inactive-color=\"#ff4949\"></el-switch>\n        </el-form-item>\n\n      </el-form>\n\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"editBookVisible = false\">取 消</el-button>\n        <el-button @click=\"editBookInfo\">确 定</el-button>\n      </span>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      // 存放后端的书籍\n      books: [],\n      // 添加书籍的对话框\n      addBookVisible: false,\n      // 存放添加书籍表格数据\n      addBookForm: {\n        title: \"\",\n        author: \"\",\n        read: false\n      },\n      // 添加书籍规则\n      addBookRules: {\n        title: [{ required: true, message: \"请输入书籍名称\", trigger: \"blur\" }],\n        author: [{ required: true, message: \"请输入作者名称\", trigger: \"blur\" }]\n      },\n      // 编辑书籍对话框\n      editBookVisible: false,\n      // 存放编辑书籍的对象\n      editForm: {}\n    };\n  },\n  methods: {\n    async getBooks() {\n      // 获取书籍\n      const res = await this.$http.get(\"books\");\n      // console.log(res);\n      // console.log(res.status)\n      // console.log(res.status)\n      this.books = res.data;\n    },\n    addBook() {\n      this.$refs.bookRef.validate(async valid => {\n        if (!valid) return;\n        //添加书籍请求\n        const res = await this.$http.post(\"add\", this.addBookForm);\n        console.log(res);\n        // 这里判断要加引号'' 数字无法识别\n        if (res.status !== 200) {\n          this.$message.error(\"添加书籍失败\");\n        }\n        this.$message.success(\"添加书籍成功\");\n        this.addBookVisible = false;\n        this.getBooks();\n      });\n    },\n    // 清空添加书籍输入框\n    addDialogClosed() {\n      this.$refs.bookRef.resetFields();\n    },\n\n    // 编辑书籍对话框\n    async showEditDialog(id) {\n      // console.log(id)\n      const res = await this.$http.get(\"showbooks/\" + id);\n      // 看res.data 会发现出现了 __ob__: Observer\n      // 这是vue 里的特性\n      console.log(res);\n      console.log(res.data[0]);\n      if (res.status !== 200) {\n        return this.$message.error(\"查询书籍失败\");\n      }\n      // 带 [0] 可以才能获得数据\n      this.editForm = res.data[0];\n\n      this.editBookVisible = true;\n    },\n    // 监听书籍修改对话框的关闭事件\n    editDialogClosed() {\n      this.$refs.editFormRef.resetFields();\n    },\n    // 修改书籍信息\n    editBookInfo() {\n      this.$refs.editFormRef.validate(async valid => {\n        if (!valid) return;\n        console.log(this.editForm);\n        const res = await this.$http.post(\n          \"editbooks/\" + this.editForm.id,\n          this.editForm\n        );\n        console.log(res);\n        if (res.status !== 200) {\n          return this.$message.error(\"修改失败\");\n        }\n\n        //关闭对话框 刷新页面 提示修改成功\n        this.editBookVisible = false;\n        this.getBooks();\n        this.$message.success(\"修改成功\");\n      });\n    },\n    // 删除书籍 根据id值\n    async deleteBook(id) {\n      // 弹框提示用户删除书籍\n      const res = await this.$confirm(\n        \"此操作将永久删除该书籍, 是否继续?\",\n        \"提示\",\n        {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\"\n        }\n      ).catch(err => err);\n      // 如果用户确认删除 则返回confirm 取消返回cancel\n\n      if (res !== \"confirm\") {\n        return this.$message.info(\"已取消删除\");\n      }\n\n      const res2 = await this.$http.post(\"delete/\" + id);\n      if (res2.status !== 200) {\n        return this.$message.error(\"删除失败\");\n      }\n\n      this.getBooks();\n      return this.$message.success(\"删除成功\");\n    }\n  },\n\n  created() {\n    this.getBooks();\n  }\n};\n</script>\n\n<style lang=\"less\" scoped>\n.home_container {\n  background-color: #fff2df;\n  height: 100%;\n}\n.el-header {\n  text-align: center;\n  font-size: 40px;\n  margin-top: 20px;\n}\n.el-main {\n  margin: 0 auto;\n}\n</style>"]}]}